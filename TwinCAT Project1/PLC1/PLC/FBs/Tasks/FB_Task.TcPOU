<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Task" Id="{15173ef1-ba55-44a8-a63e-6bf619f6f525}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Task
VAR_INPUT
	iTaskNumber:USINT; //number of the task in the station, e.g. 1,2,3,4
	iEnableTask:BOOL; //TRUE to enable the task
	iBypassTask:BOOL; //TRUE to skip the task if not required for a particular complexity
	iStartTask:BOOL; //TRUE to start task
	iCompleteTask:BOOL; //TRUE if the task is complete
	iTaskName:STRING(255); //name of task
END_VAR
VAR_OUTPUT
END_VAR
VAR
	startosr:R_TRIG; //start osr
	endosr:R_TRIG; //end osr
	TaskRunning: BOOL;
	
	//task state OSRs
	osrNotStarted:R_TRIG;
	osrStarted:R_TRIG;
	osrCompleted:R_TRIG;
	osrPassed:R_TRIG;
	osrFailed:R_TRIG; //failed to perform process
	osrRejected:R_TRIG; //failed on guage test
	osrSkipped:R_TRIG;
	osrBypassed:R_TRIG;
	osrUnknown:R_TRIG;
	
END_VAR
VAR_IN_OUT
	iqPartData:typeStation; //insert station data
END_VAR









//theme:2mcGhpbWlyg]]></Declaration>
    <Implementation>
      <ST><![CDATA[startosr(CLK:=iStartTask);
endosr(CLK:=iCompleteTask);

//call assign states
actAssignState();

//set base colour
iqPartData.part.tasks[iTaskNumber].StateColour := HMIColour.colourGreyBackground;

//set task name
iqPartData.part.tasks[iTaskNumber].singleTaskName := iTaskName;

IF iEnableTask THEN
	iqPartData.part.tasks[iTaskNumber].IsTaskEnabled := TRUE;
	ELSE
	iqPartData.part.tasks[iTaskNumber].IsTaskEnabled := FALSE;
END_IF

//start task
IF startosr.Q THEN
	TaskRunning:=TRUE; //start task
END_IF

//end task conditions
IF endosr.Q THEN
	TaskRunning:=FALSE;
	iqPartData.part.tasks[iTaskNumber].TaskStatus := TaskState.Completed;
END_IF

//increment task time
IF TaskRunning AND System.PulseHundredMilliSecond THEN
	iqPartData.part.tasks[iTaskNumber].TaskStatus := TaskState.Started;
	iqPartData.part.tasks[iTaskNumber].CycleTimeActual := iqPartData.part.tasks[iTaskNumber].CycleTimeActual + 0.1;
END_IF

IF iBypassTask THEN
	;
END_IF


//set colour based on pass/fail
IF  iqPartData.part.tasks[iTaskNumber].IsTaskPassed THEN //set outcome colour
	iqPartData.part.tasks[iTaskNumber].StateColour := HMIColour.colourGreen;
END_IF

IF  iqPartData.part.tasks[iTaskNumber].IsTaskFailed THEN //set outcome colour
	iqPartData.part.tasks[iTaskNumber].StateColour := HMIColour.colourRed;
END_IF


//sum of pass / fail = Task Complete
IF 	(iqPartData.part.tasks[iTaskNumber].IsTaskPassed OR
	iqPartData.part.tasks[iTaskNumber].IsTaskFailed) OR
	iqPartData.part.tasks[iTaskNumber].TaskStatus = TaskState.Bypassed THEN
	iqPartData.part.tasks[iTaskNumber].IsTaskComplete := TRUE;
	ELSE
	iqPartData.part.tasks[iTaskNumber].IsTaskComplete := FALSE;
END_IF


]]></ST>
    </Implementation>
    <Action Name="actAssignState" Id="{37109fc0-0d72-408a-be10-beb38c4b6abe}">
      <Implementation>
        <ST><![CDATA[//OSR check for setting feedback
osrNotStarted		(CLK:=NOT iqPartData.part.PartPresent					);
osrStarted			(CLK:=iStartTask										);
osrCompleted		(CLK:=iCompleteTask										);
osrPassed			(CLK:=iqPartData.part.tasks[iTaskNumber].IsTaskPassed	);
osrFailed			(CLK:=iqPartData.part.tasks[iTaskNumber].IsTaskFailed	); //failed to perform process
osrRejected			(CLK:=iqPartData.part.tasks[iTaskNumber].IsTaskRejected	); //failed on guage test
osrSkipped			(CLK:=iqPartData.part.tasks[iTaskNumber].IsTaskSkipped	);
osrBypassed			(CLK:=iqPartData.part.tasks[iTaskNumber].IsTaskBypassed	);
osrUnknown			(CLK:=NOT iqPartData.part.PartPresent AND iqPartData.part.DataReadNOK	);

IF osrNotStarted.Q	THEN ;		ELSE	;		END_IF;
IF osrStarted.Q		THEN ;		ELSE	;		END_IF;
IF osrCompleted.Q	THEN ;		ELSE	;		END_IF;
IF osrPassed.Q		THEN ;		ELSE	;		END_IF;
IF osrFailed.Q		THEN ;		ELSE	;		END_IF;
IF osrRejected.Q	THEN ;		ELSE	;		END_IF;
IF osrSkipped.Q		THEN ;		ELSE	;		END_IF;
IF osrBypassed.Q	THEN ;		ELSE	;		END_IF;
IF osrUnknown.Q		THEN ;		ELSE	;		END_IF;
IF osrRejected.Q	THEN ;		ELSE	;		END_IF;
]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="FB_Task">
      <LineId Id="9" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="139" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="38" Count="1" />
      <LineId Id="80" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="81" Count="1" />
      <LineId Id="115" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="116" Count="3" />
      <LineId Id="123" Count="2" />
      <LineId Id="122" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="130" Count="2" />
      <LineId Id="129" Count="0" />
      <LineId Id="181" Count="1" />
      <LineId Id="41" Count="0" />
    </LineIds>
    <LineIds Name="FB_Task.actAssignState">
      <LineId Id="2" Count="20" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>