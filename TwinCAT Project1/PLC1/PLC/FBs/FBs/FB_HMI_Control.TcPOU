<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_HMI_Control" Id="{01ed13c7-6a6a-43a8-8dee-d4708dd83b55}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_HMI_Control
VAR_INPUT
	//iStationNumber : UINT;
	iRowNumber : UINT;
	
	iAdvanceLimit: BOOL;
	iReturnLimit: BOOL;
	iAdvanceCoil: BOOL;
	iReturnCoil: BOOL;
	
	iAdvanceTime:TIME;
	iReturnTime: TIME;
	
	iAdvanceInterlock: BOOL;
	iReturnInterlock: BOOL;

	iAdvancePrompt: BOOL;
	iReturnPrompt: BOOL;
	
	iConfig: WORD; //config for hide data
	
	iAdvanceNumber: UINT; //advance row number of sequence
	iReturnNumber: UINT; //return row number of sequence

	iUnits: STRING := ' mm';
	iPosn:   STRING := '0.0';
	iUsePV:BOOL :=FALSE; //TRUE to use process value (PV) from HMI row input 
END_VAR

VAR_OUTPUT
	qRow: UINT;
	qAdvanceReq: BOOL;
	qReturnReq: BOOL;
	qResultMessageOffset: UINT;
	qSP:STRING; //setpoint value returned from motionrow
END_VAR

VAR
	tNumMessagesPerRow: UINT;
	tMessageOffset: UINT;
	unitsString: STRING(255);
	
	advPulse:R_TRIG;
	retPulse:R_TRIG;
	
	
	strSPvalue:STRING;
	strPVvalue:STRING;
	strResultSPPVstring:STRING;
	
END_VAR

VAR_IN_OUT
	//NumRows: UINT;
	//MotionRowLocation: typeMotionRow;
	////MotionRowBtnLocation: typeMotionRowButtons;
	//iqMotionRecordStation: typeMotionRowArry;
	
	stndata:typeStation;
END_VAR

//theme:DrmpZtxr0kY]]></Declaration>
    <Implementation>
      <ST><![CDATA[//calculate row order
qRow := iRowNumber * 20; //20 = number messages per row, or things per row

//Calculate number of rows
stndata.Data.NumOfRows := stndata.Data.NumOfRows + 1; //increment on scan of IN_OUT

//setup block clear down values
qAdvanceReq := FALSE;
qReturnReq := FALSE;
stndata.MotionRow[iRowNumber].Advance.Depth := FALSE;
stndata.MotionRow[iRowNumber].Returned.Depth := FALSE;
stndata.MotionRow[iRowNumber].Advance.RequestCoil := FALSE;
stndata.MotionRow[iRowNumber].Returned.RequestCoil := FALSE;
stndata.MotionRow[iRowNumber].Advance.InterlockOK := FALSE;
stndata.MotionRow[iRowNumber].Returned.InterlockOK := FALSE;
stndata.MotionRow[iRowNumber].Advance.Prompt := FALSE;
stndata.MotionRow[iRowNumber].Returned.Prompt := FALSE;
		

//advance feedback for HMI
IF stndata.MotionRowBtn[iRowNumber].btnAdvance	THEN	qAdvanceReq := TRUE;						END_IF
IF stndata.MotionRowBtn[iRowNumber].btnReturn	THEN	qReturnReq := TRUE;							END_IF

//limit switches
IF iAdvanceLimit					THEN	stndata.MotionRow[iRowNumber].Advance.Depth := TRUE;	END_IF
IF iReturnLimit						THEN	stndata.MotionRow[iRowNumber].Returned.Depth := TRUE;	END_IF

//coil feedback
IF iAdvanceCoil						THEN  	stndata.MotionRow[iRowNumber].Advance.RequestCoil := TRUE;	END_IF
IF iReturnCoil						THEN	stndata.MotionRow[iRowNumber].Returned.RequestCoil := TRUE; END_IF

//interlocks
IF iAdvanceInterlock				THEN	stndata.MotionRow[iRowNumber].Advance.InterlockOK := TRUE;	END_IF
IF iReturnInterlock					THEN	stndata.MotionRow[iRowNumber].Returned.InterlockOK := TRUE; END_IF

//prompts
IF iAdvancePrompt					THEN	stndata.MotionRow[iRowNumber].Advance.Prompt := TRUE;		END_IF
IF iReturnPrompt					THEN 	stndata.MotionRow[iRowNumber].Returned.Prompt := TRUE;		END_IF

//times
stndata.MotionRow[iRowNumber].Advance.TimeTaken		:= iAdvanceTime;
stndata.MotionRow[iRowNumber].Returned.TimeTaken	:= iReturnTime;

//Number of messages per motion, typ. 5 messages with space for more (10)
tNumMessagesPerRow						:= GlobalMessages.AllocMsgPerRow;

//define message position
//n= number of messages per row
tMessageOffset := tNumMessagesPerRow * iRowNumber;
qResultMessageOffset := tMessageOffset - tNumMessagesPerRow;

//config
//clear down config
stndata.MotionRow[iRowNumber].Advance.bHideButton		:= FALSE;
stndata.MotionRow[iRowNumber].Advance.bHideCoil			:= FALSE;
stndata.MotionRow[iRowNumber].Advance.bHideDepth		:= FALSE;
stndata.MotionRow[iRowNumber].Advance.bHideInterlock	:= FALSE;
stndata.MotionRow[iRowNumber].Advance.bHidePrompt		:= FALSE;
stndata.MotionRow[iRowNumber].Advance.bHideTime			:= FALSE;
stndata.MotionRow[iRowNumber].Returned.bHideButton		:= FALSE;
stndata.MotionRow[iRowNumber].Returned.bHideCoil		:= FALSE;
stndata.MotionRow[iRowNumber].Returned.bHideDepth		:= FALSE;
stndata.MotionRow[iRowNumber].Returned.bHideInterlock	:= FALSE;
stndata.MotionRow[iRowNumber].Returned.bHidePrompt		:= FALSE;
stndata.MotionRow[iRowNumber].Returned.bHideTime		:= FALSE;
stndata.MotionRow[iRowNumber].bHideName					:= FALSE;
stndata.MotionRow[iRowNumber].bHidePosn					:= FALSE;

//setup config
IF iConfig.0	THEN stndata.MotionRow[iRowNumber].Advance.bHideButton		:= TRUE; END_IF
IF iConfig.1	THEN stndata.MotionRow[iRowNumber].Advance.bHideCoil		:= TRUE; END_IF
IF iConfig.2	THEN stndata.MotionRow[iRowNumber].Advance.bHideDepth		:= TRUE; END_IF
IF iConfig.3	THEN stndata.MotionRow[iRowNumber].Advance.bHideInterlock	:= TRUE; END_IF
IF iConfig.4	THEN stndata.MotionRow[iRowNumber].Advance.bHidePrompt		:= TRUE; END_IF
IF iConfig.5	THEN stndata.MotionRow[iRowNumber].Advance.bHideTime		:= TRUE; END_IF
IF iConfig.6	THEN stndata.MotionRow[iRowNumber].Returned.bHideButton		:= TRUE; END_IF
IF iConfig.7	THEN stndata.MotionRow[iRowNumber].Returned.bHideCoil		:= TRUE; END_IF
IF iConfig.8	THEN stndata.MotionRow[iRowNumber].Returned.bHideDepth		:= TRUE; END_IF
IF iConfig.9	THEN stndata.MotionRow[iRowNumber].Returned.bHideInterlock	:= TRUE; END_IF
IF iConfig.10	THEN stndata.MotionRow[iRowNumber].Returned.bHidePrompt		:= TRUE; END_IF
IF iConfig.11	THEN stndata.MotionRow[iRowNumber].Returned.bHideTime		:= TRUE; END_IF
IF iConfig.12	THEN stndata.MotionRow[iRowNumber].bHidePosn				:= TRUE; END_IF
IF iConfig.13	THEN stndata.MotionRow[iRowNumber].bHideName				:= TRUE; END_IF


//advance number of order
stndata.MotionRow[iRowNumber].Advance.NumberOrder := iAdvanceNumber;
//return number of order
stndata.MotionRow[iRowNumber].Returned.NumberOrder := iReturnNumber;

IF iUsePV THEN
	
	//assemble SP / PV text
	//SP: 123.456 PV:321.654 mm 
	stndata.MotionRow[iRowNumber].strPosn := CONCAT(STR1:=iPosn, STR2:=iUnits);
	
	strSPvalue := CONCAT(STR1:='SP: ', STR2:=stndata.MotionRowBtn[iRowNumber].stnPosnInput);
	strPVvalue := CONCAT(STR1:='PV: ', STR2:=stndata.MotionRow[iRowNumber].strPosn);	
	strPVvalue := CONCAT(STR1:=' / ', STR2:=strPVvalue);	
	strResultSPPVstring := CONCAT(STR1:=strSPvalue, STR2:=strPVvalue);
	
	stndata.MotionRow[iRowNumber].strPosn := strResultSPPVstring;
	qSP := stndata.MotionRowBtn[iRowNumber].stnPosnInput;
	 ELSE
	//assemble posn string
	// xxx.xxx <units>
	// 123.456 mm
	stndata.MotionRow[iRowNumber].strPosn := CONCAT(STR1:=iPosn, STR2:=iUnits);
	qSP := '0.0';
	
END_IF

IF gHMIButtons.btnAbsMode THEN
	stndata.MotionRow[iRowNumber].bIsAbsSymSwitch := TRUE;
	ELSE
	stndata.MotionRow[iRowNumber].bIsAbsSymSwitch := FALSE;
END_IF

//setup default colour
stndata.MotionRow[iRowNumber].Advance.CoilColour	:= HMIColour.colourGreyBackground;
stndata.MotionRow[iRowNumber].Returned.CoilColour	:= HMIColour.colourGreyBackground;
stndata.MotionRow[iRowNumber].Advance.FdbkColour	:= HMIColour.colourGreyBackground;
stndata.MotionRow[iRowNumber].Returned.FdbkColour	:= HMIColour.colourGreyBackground;
	
//colour setup for row
IF	qAdvanceReq		THEN stndata.MotionRow[iRowNumber].Advance.CoilColour	:= HMIColour.colourGreen;	END_IF
IF	qReturnReq		THEN stndata.MotionRow[iRowNumber].Returned.CoilColour	:= HMIColour.colourYellow;	END_IF
IF	iAdvanceLimit	THEN stndata.MotionRow[iRowNumber].Advance.FdbkColour	:= HMIColour.colourGreen;	END_IF
IF	iReturnLimit	THEN stndata.MotionRow[iRowNumber].Returned.FdbkColour	:= HMIColour.colourYellow;	END_IF

//record number of motions
actUpdateRecord();]]></ST>
    </Implementation>
    <Action Name="actUpdateRecord" Id="{434e14d4-429c-464f-877e-d0874076e223}">
      <Implementation>
        <ST><![CDATA[//generate pulse per motion limit
advPulse(CLK:=iAdvanceLimit);
retPulse(CLK:=iReturnLimit);


//update motion record
IF advPulse.Q THEN
		stndata.MotionRecordStation.data[iRowNumber].Advanced 
	:=	stndata.MotionRecordStation.data[iRowNumber].Advanced  + 1;
END_IF

//update motion record
IF retPulse.Q THEN
		stndata.MotionRecordStation.data[iRowNumber].Returned 
	:=	stndata.MotionRecordStation.data[iRowNumber].Returned + 1;
END_IF]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="FB_HMI_Control">
      <LineId Id="9" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="256" Count="0" />
      <LineId Id="255" Count="0" />
      <LineId Id="257" Count="1" />
      <LineId Id="260" Count="7" />
      <LineId Id="259" Count="0" />
      <LineId Id="76" Count="1" />
      <LineId Id="75" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="111" Count="1" />
      <LineId Id="120" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="141" Count="2" />
      <LineId Id="149" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="156" Count="1" />
      <LineId Id="159" Count="2" />
      <LineId Id="165" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="166" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="188" Count="0" />
      <LineId Id="172" Count="1" />
      <LineId Id="171" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="140" Count="0" />
      <LineId Id="175" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="177" Count="1" />
      <LineId Id="180" Count="0" />
      <LineId Id="182" Count="1" />
      <LineId Id="185" Count="0" />
      <LineId Id="191" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="195" Count="5" />
      <LineId Id="204" Count="2" />
      <LineId Id="208" Count="2" />
      <LineId Id="272" Count="0" />
      <LineId Id="212" Count="1" />
      <LineId Id="207" Count="0" />
      <LineId Id="187" Count="0" />
      <LineId Id="214" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="216" Count="1" />
      <LineId Id="448" Count="0" />
      <LineId Id="450" Count="0" />
      <LineId Id="453" Count="1" />
      <LineId Id="458" Count="0" />
      <LineId Id="461" Count="0" />
      <LineId Id="465" Count="0" />
      <LineId Id="472" Count="0" />
      <LineId Id="460" Count="0" />
      <LineId Id="468" Count="1" />
      <LineId Id="449" Count="0" />
      <LineId Id="447" Count="0" />
      <LineId Id="215" Count="0" />
      <LineId Id="451" Count="1" />
      <LineId Id="218" Count="0" />
      <LineId Id="470" Count="1" />
      <LineId Id="442" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="223" Count="2" />
      <LineId Id="222" Count="0" />
      <LineId Id="320" Count="0" />
      <LineId Id="227" Count="0" />
      <LineId Id="321" Count="0" />
      <LineId Id="228" Count="0" />
      <LineId Id="324" Count="1" />
      <LineId Id="322" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="230" Count="0" />
      <LineId Id="236" Count="0" />
      <LineId Id="245" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="380" Count="0" />
      <LineId Id="379" Count="0" />
      <LineId Id="381" Count="0" />
    </LineIds>
    <LineIds Name="FB_HMI_Control.actUpdateRecord">
      <LineId Id="13" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="2" />
      <LineId Id="6" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="16" Count="4" />
      <LineId Id="15" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>